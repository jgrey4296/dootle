## pyproject.toml -*- mode: toml -*-

[project]
name            = "dootle"
version         = "0.3.2"
description     = "A Library of extensions for Doot task running"
readme          = "README.md"
requires-python = ">=3.12"
license-files   = ["LICENSE"]
keywords        = []
authors         = [
  {name         = "John Grey", email = "jgrey.n.plus.one@gmail.com"},
]

classifiers     = [
  "Programming Language :: Python"
]

dependencies   = [
    "doot>=1.0",
    "pony>=0.7",
    "networkx",
    "jgdv>=1.3",
    "bibtex-bibble",
    "mastodon-py>=2.0.1",
    "python-statemachine>=2.5.0",
]

##-- urls
[project.urls]
homepage      = "https://github.com/jgrey4296/dootle"
documentation = "https://dootle.readthedocs.io/en/latest"
repository    = "https://github.com/jgrey4296/dootle"
changelog     = "https://github.com//dootle/blob/master/CHANGELOG.md"

##-- end urls

##-- scripts
[project.scripts]

##-- end scripts

##-- entry-points
[project.entry-points."doot.plugins.command"]
# example = "dootle.cmds.example_cmd:ExampleCmd"

[project.entry-points."doot.plugins.action"]
say                 = "dootle.actions.say:SayAction"
"mamba.env"         = "dootle.python.mamba:MambaEnv"
# Random
rng_fresh           = "dootle.actions.random:rng_fresh"
rng_spawn           = "dootle.actions.random:rng_spawn"
rng_ints            = "dootle.actions.random:rng_ints"
rng_draw            = "dootle.actions.random:rng_draw"
# Postbox
"post.put"          = "dootle.actions.postbox:PutPostAction"
"post.get"          = "dootle.actions.postbox:GetPostAction"
"post.clear"        = "dootle.actions.postbox:ClearPostAction"
# Shell Actions
"shell!"            = "dootle.actions.shell:ShellAction"
"bake!"             = "dootle.actions.shell:ShellBake"
"run-bake!"         = "dootle.actions.shell:ShelBakedRun"
# Job Actions
"job.walk"                  = "dootle.jobs.walker:JobWalkAction"
"job.inject.shadow"         = "dootle.jobs.shadow:InjectShadowAction"
"job.limit"                 = "dootle.jobs.limit:JobLimitAction"
"job.expand"                = "dootle.jobs.expand:JobExpandAction"
"job.queue"                 = "dootle.jobs.expand:JobQueueAction"
"job.match"                 = "dootle.jobs.expand:JobMatchAction"
"job.inject.path.elements"  = "dootle.jobs.injection:JobInjectPathParts"

##-- end entry-points

##-- build-system
[build-system]
requires = [
         "setuptools >= 63.1.0",
         "wheel >= 0.37.1"
]

build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
namespaces = true
where      = ["."]
include    = ["dootle*"]
exclude    = ["dootle._docs*"]

[tool.setuptools.package-data]
"*" = ["*"]
"dootle.__data"    = ["*.so"]

[tool.setuptools.exclude-package-data]
dootle = ["**.rst"]

[tool.distutils.egg_info]
# from https://github.com/pypa/setuptools/discussions/3348#discussioncomment-6556887
egg_base = ".temp/egg-info"

##-- end build-system

# Tools #######################################################################

##-- pytest
# https://docs.pytest.org/en/stable/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]
addopts          = [
  # "--cov=",
  # "--ignore-glob=related_/*"
]
cache_dir       = ".temp/pytest_cache"
log_file        = ".temp/logs/pytest.log"

log_cli         = false
log_level       = "DEBUG"
log_cli_level   = "INFO"
log_format      = "%(levelname)s %(name)s : %(message)s"
log_file_level  = "DEBUG"
log_file_format = "%(asctime)s %(levelname)s %(name)s : %(message)s"
##-- end pytest

##-- coverage
# https://pytest-cov.readthedocs.io/en/latest/config.html
# add "addopts = '--cov-report xml --cov={}' " for pytest
[tool.coverage.run]
branch            = true  # measure branch coverage
cover_pylib       = false # measure stdlib
relative_files    = false 
data_file         = ".temp/coverage/coverage_cache" # cache
disable_warnings  = []
omit              = [ # files to not measure
    "*/__tests/*",
    "*__init__.py",
    "*_interface.py",
    
] 

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    "^import",
    "^from",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
# fail_under  = 20 # coverage percentage
format        = "text" # or "markdown", "total"
show_missing  = true # for in the report
skip_empty    = true # skip files like __init__.py

[tool.coverage.html]
directory = ".temp/coverage/html_report" # where to write output

[tool.coverage.xml]
output    = ".temp/coverage/coverage.xml" # where to write output

[tool.coverage.json]
output        = ".temp/coverage/coverage.json"  # where to write output
pretty_print  = true
##-- end coverage

##-- isort
# https://pycqa.github.io/isort/docs/configuration/options.html
[tool.isort]
color_output           = false
py_version             = 311
# profile                = "hug"
comment_prefix         = "# "
sections               = [
"FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"
]
default_section        = "THIRDPARTY"
lines_after_imports    = -1
lines_between_sections = 1
lines_between_types    = 0

import_heading_future      = "Imports:"
import_heading_stdlib      = "##-- stdlib imports"
import_heading_thirdparty  = "##-- 3rd party imports"
import_heading_firstparty  = "##-- 1st party imports"
import_heading_localfolder = ""

import_footer_future      = ""
import_footer_stdlib      = "##-- end stdlib imports"
import_footer_thirdparty  = "##-- end 3rd party imports"
import_footer_firstparty  = "##-- end 1st party imports"
import_footer_localfolder = ""

add_imports            = []

##-- end isort

##-- mypy
# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
strict                  = false
python_version          = "3.12"
python_executable       = ".venv/bin/python"
cache_dir               = "~/_cache_/mypy"
incremental             = true
follow_imports          = "silent"
follow_untyped_imports  = true
ignore_missing_imports  = false
enable_error_code       = [
    "explicit-override", "ignore-without-code",
    "possibly-undefined", "unreachable",
    "type-arg",
    ]
disable_error_code   = []

warn_return_any      = true
warn_unused_configs  = true

# Per-module options:
# [[tool.mypy.overrides]]
# module             = "blah"
# disallow_untyped_defs = true

##-- end mypy

##-- towncrier
[tool.towncrier]
package    = "dootle"
directory  = "dootle/_docs/_changes"
filename   = "CHANGELOG.md"
template   = "dootle/_docs/_templates/news.md"
create_add_extension = true

##-- end towncrier

##-- uv
[tool.uv.sources]
bibtex-bibble = { path = "../bibble", editable = true }
doot = { path = "../../", editable = true }

[dependency-groups]
dev = [
    "ipython>=9.4.0",
    "sh>=2.2.2",
    "towncrier>=24.8.0",
    ]
test =[
    "pydot>=4.0.1",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "tox>=4.28.4",
    "tox-uv>=1.27.0",
    "ruff>=0.12.8",
]
docs = [
    "myst-parser>=4.0.1",
    "sphinx>=8.2.3",
    "sphinx-autoapi>=3.6.0",
    "sphinx-rtd-theme>=3.0.2",
    "pydot>=4.0.1",
    "tox>=4.28.4",
    "tox-uv>=1.27.0",
]


##-- end uv
